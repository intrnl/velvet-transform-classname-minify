<script>
	import './style.css';

	const ENTER_KEY = 13;
	const ESCAPE_KEY = 27;

	const STORAGE_KEY = 'todos';

	const filters = {
		all: (items) => items,
		active: (items) => items.filter((item) => !item.completed),
		completed: (items) => items.filter((item) => item.completed),
	};

	let items = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
	let visibility = 'all';
	let editing = null;
	let editing_ref = null;

	$: filtered_items = filters[visibility](items);
	$: remaining = filters.active(items).length;

	const toggle_all = (event) => {
		items = items.map((item) => ({ ...item, completed: event.target.checked }));
	};

	const clear_completed = () => {
		items = items.filter((item) => !item.completed);
	};

	const add_todo = (event) => {
		if (event.which === ENTER_KEY) {
			items = items.concat({
				id: Date.now(),
				title: event.target.value,
				completed: false,
			});

			event.target.value = '';
		}
	};

	const remove_todo = (id) => {
		items = items.filter((item) => item.id !== id);
	};

	const edit_todo = (next) => {
		items = items.map((item) => {
			if (item.id !== next.id) return item;
			return { ...item, ...next };
		});
	};

	const toggle_todo = (id, event) => {
		edit_todo({ id, completed: event.target.checked });
	};

	const handle_edit = (event) => {
		if (event.which === ENTER_KEY) {
			event.target.blur()
		}
		else if (event.which === ESCAPE_KEY) {
			editing = null;
			editing_ref = null;
		}
	};

	const handle_submit = (event) => {
		edit_todo({ id: editing, title: event.target.value });
		editing = null;
		editing_ref = null;
	};

	const update_view = () => {
		let route = window.location.hash.replace(/#\/?/, '');

		if (!filters[route]) {
			route = 'all';
		}

		visibility = route;
	};

	window.addEventListener('hashchange', update_view);
	update_view();

	$: localStorage.setItem(STORAGE_KEY, JSON.stringify(items));
	$: if (editing_ref) setTimeout(() => editing_ref.focus());
</script>

<header class='header'>
	<h1>todos</h1>
	<input
		class='new-todo'
		@keydown={add_todo}
		placeholder='What needs to be done?'
		autofocus
	/>
</header>

{#if items.length > 0}
	<section class='main'>
		<input id='toggle-all' class='toggle-all' type='checkbox' .checked={remaining === 0} @change={toggle_all} />
		<label for='toggle-all'>Mark all as complete</label>

		<ul class='todo-list'>
			{#each item of filtered_items}
				<li class={`todo ${item.completed ? 'completed' : ''} ${editing === item.id ? 'editing' : ''}`}>
					<div class='view'>
						<input
							class='toggle'
							type='checkbox'
							.checked={item.completed}
							@change={(event) => toggle_todo(item.id, event)}
						/>

						<label @dblclick={() => editing = item.id}>
							{item.title}
						</label>

						<button class='destroy' @click={() => remove_todo(item.id)} />
					</div>

					{#if editing === item.id}
						<input
							#ref={editing_ref}
							class='edit'
							.value={item.title}
							@keydown={handle_edit}
							@blur={handle_submit}
						/>
					{/if}
				</li>
			{/each}
		</ul>

		<footer class='footer'>
			<span class='todo-count'>
				<strong>{remaining}</strong> {remaining === 1 ? 'item' : 'items'} left
			</span>

			<ul class='filters'>
				<li><a class={visibility === 'all' ? 'selected' : ''} href='#/'>All</a></li>
				<li><a class={visibility === 'active' ? 'selected' : ''} href='#/active'>Active</a></li>
				<li><a class={visibility === 'completed' ? 'selected' : ''} href='#/completed'>Completed</a></li>
			</ul>

			{#if items.length > remaining}
				<button class='clear-completed' @click={clear_completed}>
					Clear completed
				</button>
			{/if}
		</footer>
	</section>
{/if}

<style>
	button {
		margin: 0;
		padding: 0;
		border: 0;
		background: none;
		font-size: 100%;
		vertical-align: baseline;
		font-family: inherit;
		font-weight: inherit;
		color: inherit;
		appearance: none;
	}

	.hidden {
		display: none;
	}

	:host {
		display: block;
		background: #fff;
		margin: 130px 0 40px 0;
		position: relative;
		box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2),
								0 25px 50px 0 rgba(0, 0, 0, 0.1);
	}

	input::placeholder {
		font-style: italic;
		font-weight: 400;
		color: rgba(0, 0, 0, 0.4);
	}

	h1 {
		position: absolute;
		top: -140px;
		width: 100%;
		font-size: 80px;
		font-weight: 200;
		text-align: center;
		color: #b83f45;
		text-rendering: optimizeLegibility;
	}

	.new-todo,
	.edit {
		position: relative;
		margin: 0;
		width: 100%;
		font-size: 24px;
		font-family: inherit;
		font-weight: inherit;
		line-height: 1.4em;
		color: inherit;
		padding: 6px;
		border: 1px solid #999;
		box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);
		box-sizing: border-box;
	}

	.new-todo {
		padding: 16px 16px 16px 60px;
		height: 65px;
		border: none;
		background: rgba(0, 0, 0, 0.003);
		box-shadow: inset 0 -2px 1px rgba(0,0,0,0.03);
	}

	.main {
		position: relative;
		z-index: 2;
		border-top: 1px solid #e6e6e6;
	}

	.toggle-all {
		width: 1px;
		height: 1px;
		border: none; /* Mobile Safari */
		opacity: 0;
		position: absolute;
		right: 100%;
		bottom: 100%;
	}

	.toggle-all + label {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 45px;
		height: 65px;
		font-size: 0;
		position: absolute;
		top: -65px;
		left: -0;
	}

	.toggle-all + label:before {
		content: '❯';
		display: inline-block;
		font-size: 22px;
		color: #949494;
		padding: 10px 27px 10px 27px;
		transform: rotate(90deg);
	}

	.toggle-all:checked + label:before {
		color: #484848;
	}

	.todo {}

	.todo-list {
		margin: 0;
		padding: 0;
		list-style: none;
	}

	.todo-list li {
		position: relative;
		font-size: 24px;
		border-bottom: 1px solid #ededed;
	}

	.todo-list li:last-child {
		border-bottom: none;
	}

	.todo-list li.editing {
		border-bottom: none;
		padding: 0;
	}

	.todo-list li.editing .edit {
		display: block;
		width: calc(100% - 43px);
		padding: 12px 16px;
		margin: 0 0 0 43px;
	}

	.todo-list li.editing .view {
		display: none;
	}

	.todo-list li .toggle {
		text-align: center;
		width: 40px;
		/* auto, since non-WebKit browsers doesn't support input styling */
		height: auto;
		position: absolute;
		top: 0;
		bottom: 0;
		margin: auto 0;
		border: none; /* Mobile Safari */
		-webkit-appearance: none;
		appearance: none;
	}

	.todo-list li .toggle {
		opacity: 0;
	}

	.todo-list li .toggle + label {
		background-image: url('/assets/checkbox.svg');
		background-repeat: no-repeat;
		background-position: center left;
	}

	.todo-list li .toggle:checked + label {
		background-image: url('/assets/checkbox-checked.svg');
	}

	.todo-list li label {
		word-break: break-all;
		padding: 15px 15px 15px 60px;
		display: block;
		line-height: 1.2;
		transition: color 0.4s;
		font-weight: 400;
		color: #484848;
	}

	.todo-list li.completed label {
		color: #949494;
		text-decoration: line-through;
	}

	.todo-list li .destroy {
		display: none;
		position: absolute;
		top: 0;
		right: 10px;
		bottom: 0;
		width: 40px;
		height: 40px;
		margin: auto 0;
		font-size: 30px;
		color: #949494;
		transition: color 0.2s ease-out;
	}

	.todo-list li .destroy:hover,
	.todo-list li .destroy:focus {
		color: #C18585;
	}

	.todo-list li .destroy:after {
		content: '×';
		display: block;
		height: 100%;
		line-height: 1.1;
	}

	.todo-list li:hover .destroy {
		display: block;
	}

	.todo-list li .edit {
		display: none;
	}

	.todo-list li.editing:last-child {
		margin-bottom: -1px;
	}

	.footer {
		padding: 10px 15px;
		height: 20px;
		text-align: center;
		font-size: 15px;
		border-top: 1px solid #e6e6e6;
	}

	.footer:before {
		content: '';
		position: absolute;
		right: 0;
		bottom: 0;
		left: 0;
		height: 50px;
		overflow: hidden;
		box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2),
								0 8px 0 -3px #f6f6f6,
								0 9px 1px -3px rgba(0, 0, 0, 0.2),
								0 16px 0 -6px #f6f6f6,
								0 17px 2px -6px rgba(0, 0, 0, 0.2);
	}

	.todo-count {
		float: left;
		text-align: left;
	}

	.todo-count strong {
		font-weight: 300;
	}

	.filters {
		margin: 0;
		padding: 0;
		list-style: none;
		position: absolute;
		right: 0;
		left: 0;
	}

	.filters li {
		display: inline;
	}

	.filters li a {
		color: inherit;
		margin: 3px;
		padding: 3px 7px;
		text-decoration: none;
		border: 1px solid transparent;
		border-radius: 3px;
	}

	.filters li a:hover {
		border-color: #DB7676;
	}

	.filters li a.selected {
		border-color: #CE4646;
	}

	.clear-completed,
	html .clear-completed:active {
		float: right;
		position: relative;
		line-height: 19px;
		text-decoration: none;
		cursor: pointer;
	}

	.clear-completed:hover {
		text-decoration: underline;
	}

	.info {
		margin: 65px auto 0;
		color: #4d4d4d;
		font-size: 11px;
		text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
		text-align: center;
	}

	.info p {
		line-height: 1;
	}

	.info a {
		color: inherit;
		text-decoration: none;
		font-weight: 400;
	}

	.info a:hover {
		text-decoration: underline;
	}

	/*
		Hack to remove background from Mobile Safari.
		Can't use it globally since it destroys checkboxes in Firefox
	*/
	@media screen and (-webkit-min-device-pixel-ratio: 0) {
		.toggle-all,
		.todo-list li .toggle {
			background: none;
		}

		.todo-list li .toggle {
			height: 40px;
		}
	}

	@media (max-width: 430px) {
		.footer {
			height: 50px;
		}

		.filters {
			bottom: 10px;
		}
	}

	:focus,
	.toggle:focus + label,
	.toggle-all:focus + label {
		box-shadow: 0 0 2px 2px #CF7D7D;
		outline: 0;
	}
</style>
